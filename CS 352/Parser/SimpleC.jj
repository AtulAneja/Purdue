
PARSER_BEGIN(SimpleC)

/** Simple brace matcher. */
public class SimpleC {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    try {
	SimpleC parser = new SimpleC(System.in);
   	parser.goal();
	System.out.println("Program compiled Successfully!");
	} catch (ParseException e) {
		System.out.println(e.currentToken.beginLine + ": Syntax Error");
	}
  }

}

PARSER_END(SimpleC)

SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
    | <"//" (~["\n"])* "\n">
    | "/*" : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP : {
<"*/"> : DEFAULT
         | <~[]>
}

TOKEN : {
  <LPARENT: "(">
    | <RPARENT: ")">
    | <CHARSTARSTAR: "char**">
    | <CHARSTAR: "char*">
    | <LONGSTAR: "long*">
    | <LONG: "long">
    | <DOUBLESTAR: "double*">
    | <DOUBLE: "double">
    | <VOID: "void">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <DO: "do">
    | <FOR: "for">
    | <CONTINUE: "continue">
    | <BREAK: "break">
    | <RETURN: "return">
    | <LSQUARE: "[">
    | <RSQUARE: "]">
    | <LCURLY: "{">
    | <RCURLY: "}">
    | <COMMA: ",">
    | <SEMICOLON: ";">
    | <ASSIGN: "=">
    | <AMPERSAND: "&">
    | <OR: "||">
    | <AND: "&&">
    | <EQUAL: "==">
    | <NOTEQUAL: "!=">
    | <LESS: "<">
    | <GREAT: ">">
    | <LESSEQUAL: "<=">
    | <GREATEQUAL: ">=">
    | <ADD: "+">
    | <SUBTRACT: "-">
    | <TIMES: "*">
    | <DIVIDE: "/">
    | <PERCENT: "%">
    | <ID: <LETTER> (<LETTER> | <DIGIT> | "_")*>
    | <CHAR_CONST: "'" (<PRINTING_CHAR> | "\\" ("n"|"r"|"0") | "\\" ("0") <OCTAL> <OCTAL>) "'" >
    | <STRING_CONST: "\"" (
	<PRINTING_CHAR>
	| "\\"("0") <OCTAL> <OCTAL>
	| "\\" | ("0") <OCTAL> <OCTAL>
	| "\\" "x" <HEX_DIGIT> <HEX_DIGIT>
	| "\\" ("n"|"t"|"r"|"0")
    )* "\"">
    | <INTEGER_CONST: <DIGIT> (<DIGIT>)* | <DIGIT> (<DIGIT>)* "_" <HEX_DIGIT> (<HEX_DIGIT>)*>
    | <DOUBLE_CONST:    (<DIGIT>)* (".")? <DIGIT> (<DIGIT>)* (("e" | "E") ("-" | "+")? <DIGIT> (<DIGIT>)*)?>
    | <PRINTING_CHAR: <LETTER> | <DIGIT> | <OTHER_CHAR>>
    | <HEX_DIGIT: <DIGIT> ["A"-"F","a"-"f"]>
    | <DIGIT: ["0"-"9"]>
    | <OCTAL: ["0"-"7"]>
    | <LETTER: ["A"-"Z","a"-"z"]>
    | <OTHER_CHAR: " " | "!" | "#" | "$" | "%" | "&" | "(" | ")"
    | "*" | "+" | "," | "-" | "." | "/" | ":" | ";"
    | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^"
    | "_" | "`" | "{" | "|" | "}" | "~">
}

void goal(): {} {
	program() <EOF>
}

void program(): {} {
	function_or_var_list()
}

void function_or_var_list(): {} {
	(var_type() <ID> (function() | global_var()))*
}

void function(): {} {
	<LPARENT> arguments() <RPARENT> compound_statement()
}

void arg_list(): {} {
	arg() (<COMMA> arg())*
}

void arguments(): {} {
	(arg_list())?
}

void arg(): {} {
	var_type() <ID>
}

void global_var(): {} {
	global_var_list() <SEMICOLON>
}

void global_var_list(): {} {
	(<COMMA> <ID>)*
}

void var_type(): {} {
	<CHARSTAR> | <CHARSTARSTAR> | <DOUBLE> | <DOUBLESTAR> | <LONG> | <LONGSTAR> | <VOID>
}

void assignment(): {} {
	(<LSQUARE> expression() <RSQUARE>)? <ASSIGN> expression()
}

void call(): {} {
	<LPARENT> call_arguments() <RPARENT>
}

void call_arg_list(): {} {
	expression() (<COMMA> expression())*
}

void call_arguments(): {} {
	call_arg_list()
}

void expression(): {} {
	logical_or_expr()
}

void logical_or_expr(): {} {
	logical_and_expr() (<OR> logical_and_expr())*
}

void logical_and_expr(): {} {
	equality_expr() (<AND> equality_expr())*
}

void equality_expr(): {} {
	relational_expr() ((<EQUAL> | <NOTEQUAL>) relational_expr())*
}

void relational_expr(): {} {
	additive_expr() ((<LESS> | <GREAT> | <LESSEQUAL> | <GREATEQUAL>) additive_expr())*
}

void additive_expr(): {} {
	multiplicative_expr() ((<ADD> | <SUBTRACT>) multiplicative_expr())*
}

void multiplicative_expr(): {} {
	unary_expr() ((<TIMES> | <DIVIDE> | <PERCENT>) unary_expr())*
}

void unary_expr(): {} {
        primary_expr() | ((<ADD> | <SUBTRACT> | <AMPERSAND> | <TIMES>) unary_expr())
}

void primary_expr(): {} {
	<STRING_CONST>
	| <ID> (call() | (<LSQUARE> expression() <RSQUARE>)? )
	| <INTEGER_CONST>
	| <DOUBLE_CONST>
	| <LPARENT> expression() <RPARENT>
}

void compound_statement(): {} {
	<LCURLY> statement_list() <RCURLY>
}


void statement_list(): {} {
	(statement())*
}

void local_var(): {} {
	var_type() local_var_list() <SEMICOLON>
}

void local_var_list(): {} {
	<ID> (<COMMA> <ID>)*
}

void statement(): {} {
	<ID> (assignment() | call()) <SEMICOLON>
	| local_var()
	| compound_statement()
	| <IF> <LPARENT> expression() <RPARENT> statement() else_optional()
	| <WHILE> <LPARENT> expression() <RPARENT> statement()
	| <DO> statement() <WHILE> <LPARENT> expression() <RPARENT> <SEMICOLON>
	| <FOR> <LPARENT> <ID> assignment() <SEMICOLON> expression() <SEMICOLON> <ID> assignment() <RPARENT> statement()
	| jump_statement()
}

void else_optional(): {} {
	(<ELSE>  statement())?
}

void jump_statement(): {} {
	(<CONTINUE> <SEMICOLON>) | (<BREAK> <SEMICOLON>) | (<RETURN> return_val_opt() <SEMICOLON>)
}

void return_val_opt(): {} {
	expression()
}

/**Root production. */
void Input() :
{ int count; }
{
  count=anytoken() <EOF>
  { System.out.println("The number of tokens is " + count); }
}

int anytoken():
{
  Token t;
  int count=0;
}
{
  (
  t = <LPARENT> { System.out.println("LPARENT, \""+t.image+"\"" ); count++; } |
  t = <RPARENT> { System.out.println("RPARENT, \""+t.image+"\"" ); count++; } |
  t = <LSQUARE> { System.out.println("LSQUARE, \""+t.image+"\"" ); count++; } |
  t = <RSQUARE> { System.out.println("RSQUARE, \""+t.image+"\"" ); count++; } |
  t = <LCURLY> { System.out.println("LCURLY, \""+t.image+"\"" ); count++; } |
  t = <RCURLY> { System.out.println("RCURLY, \""+t.image+"\"" ); count++; } |
  t = <COMMA> { System.out.println("COMMA, \""+t.image+"\"" ); count++; } |
  t = <SEMICOLON> { System.out.println("SEMICOLON, \""+t.image+"\"" ); count++; } |
  t = <ASSIGN> { System.out.println("ASSIGN, \""+t.image+"\"" ); count++; } |
  t = <AMPERSAND> { System.out.println("AMPERSAND, \""+t.image+"\"" ); count++; } |
  t = <OR> { System.out.println("OR, \""+t.image+"\"" ); count++; } |
  t = <AND> { System.out.println("AND, \""+t.image+"\"" ); count++; } |
  t = <EQUAL> { System.out.println("EQUAL, \""+t.image+"\"" ); count++; } |
  t = <NOTEQUAL> { System.out.println("NOTEQUAL, \""+t.image+"\"" ); count++; } |
  t = <LESS> { System.out.println("LESS, \""+t.image+"\"" ); count++; } |
  t = <GREAT> { System.out.println("GREAT, \""+t.image+"\"" ); count++; } |
  t = <LESSEQUAL> { System.out.println("LESSEQUAL, \""+t.image+"\"" ); count++; } |
  t = <GREATEQUAL> { System.out.println("GREATEQUAL, \""+t.image+"\"" ); count++; } |
  t = <ADD> { System.out.println("ADD, \""+t.image+"\"" ); count++; } |
  t = <SUBTRACT> { System.out.println("SUBTRACT, \""+t.image+"\"" ); count++; } |
  t = <TIMES> { System.out.println("TIMES, \""+t.image+"\"" ); count++; } |
  t = <DIVIDE> { System.out.println("DIVIDE, \""+t.image+"\"" ); count++; } |
  t = <PERCENT> { System.out.println("PERCENT, \""+t.image+"\"" ); count++; } |
  t = <CHAR_CONST> { System.out.println("CHAR_CONST, \""+t.image+"\"" ); count++; } |
  t = <STRING_CONST> { System.out.println("STRING_CONST, \""+t.image+"\"" ); count++; } |
  t = <INTEGER_CONST> { System.out.println("INTEGER_CONST, \""+t.image+"\"" ); count++; } |
  t = <DOUBLE_CONST> { System.out.println("DOUBLE_CONST, \""+t.image+"\"" ); count++; } |
  t = <PRINTING_CHAR> { System.out.println("PRINTING_CHAR, \""+t.image+"\"" ); count++; } |
  t = <DIGIT> { System.out.println("DIGIT, \""+t.image+"\"" ); count++; } |
  t = <OCTAL> { System.out.println("OCTAL, \""+t.image+"\"" ); count++; } |
  t = <HEX_DIGIT> { System.out.println("HEX_DIGIT, \""+t.image+"\"" ); count++; } |
  t = <LETTER> { System.out.println("LETTER, \""+t.image+"\"" ); count++; } |
  t = <OTHER_CHAR> { System.out.println("OTHER_CHAR, \""+t.image+"\"" ); count++; } |
  t = <CHARSTARSTAR> { System.out.println("CHARSTARSTAR, \""+t.image+"\"" ); count++; } |
  t = <CHARSTAR> { System.out.println("CHARSTAR, \""+t.image+"\"" ); count++; } |
  t = <DOUBLESTAR> { System.out.println("DOUBLESTAR, \""+t.image+"\"" ); count++; } |
  t = <DOUBLE> { System.out.println("DOUBLE, \""+t.image+"\"" ); count++; } |
  t = <LONGSTAR> { System.out.println("LONGSTAR, \""+t.image+"\"" ); count++; } |
  t = <LONG> { System.out.println("LONG, \""+t.image+"\"" ); count++; } |
  t = <VOID> { System.out.println("VOID, \""+t.image+"\"" ); count++; } |
  t = <IF> { System.out.println("IF, \""+t.image+"\"" ); count++; } |
  t = <ELSE> { System.out.println("ELSE, \""+t.image+"\"" ); count++; } |
  t = <WHILE> { System.out.println("WHILE, \""+t.image+"\"" ); count++; } |
  t = <DO> { System.out.println("DO, \""+t.image+"\"" ); count++; } |
  t = <FOR> { System.out.println("FOR, \""+t.image+"\"" ); count++; } |
  t = <CONTINUE> { System.out.println("CONTINUE, \""+t.image+"\"" ); count++; } |
  t = <BREAK> { System.out.println("BREAK, \""+t.image+"\"" ); count++; } |
  t = <RETURN> { System.out.println("RETURN, \""+t.image+"\"" ); count++; } |
  t = <ID> { System.out.println("ID, \""+t.image+"\"" ); count++; }
  )+
  {return count;}
}
